20211214 13:29:00.748495 UTC 1465614 ERROR Error: - mysql_base.cc:51
20211214 13:29:00.748515 UTC 1465614 ERROR can not connect db: host:127.0.0.1 user:root password:mysql@yinli db_name:team5 - mysql_base.cc:21
20211214 13:30:31.233244 UTC 1466159 ERROR Error: - mysql_base.cc:51
20211214 13:30:31.233279 UTC 1466159 ERROR can not connect db: host:10.0.0.17 user:root password:mysql@yinli db_name:team5 - mysql_base.cc:21
20211214 13:30:54.736312 UTC 1466293 INFO  connect db: host:10.0.0.17 user:root password: db_name:YinLi - mysql_base.cc:29
20211214 13:31:10.170524 UTC 1466392 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:11:49.115328 UTC 1687793 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:12:25.928525 UTC 1687798 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:12:25.928623 UTC 1687798 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:12:25.928672 UTC 1687797 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:12:25.928753 UTC 1687797 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:12:25.928936 UTC 1687797 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:12:25.928943 UTC 1687797 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:12:25.928945 UTC 1687797 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:203
20211215 12:14:50.790330 UTC 1688942 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:15:19.803618 UTC 1688945 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:15:19.803713 UTC 1688945 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:15:19.803929 UTC 1688945 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:15:19.803935 UTC 1688945 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:15:19.803937 UTC 1688945 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:203
20211215 12:16:23.326517 UTC 1689599 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:16:33.079678 UTC 1689602 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:16:33.079765 UTC 1689602 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:16:33.079986 UTC 1689602 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:16:33.079992 UTC 1689602 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:16:33.079994 UTC 1689602 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:203
20211215 12:18:59.545891 UTC 1690665 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:19:07.488583 UTC 1690667 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:17.352821 UTC 1691182 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:20:23.039359 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.867319 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.867449 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.867915 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.869088 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.869699 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.869814 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.881257 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.882011 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.886902 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:38.889080 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.441708 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.448090 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.448578 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.456240 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.490565 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.490987 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.492870 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.494363 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.495434 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.518733 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.546629 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.554114 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.558291 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.561226 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.574863 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.582848 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.584457 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.591048 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.607162 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.607962 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.624743 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.641168 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.642219 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.645283 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.654828 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.655069 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.664817 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.665706 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.680158 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.681560 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.681717 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.692085 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.692823 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.692960 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.704195 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.704863 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.711053 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.711470 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.714475 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.723352 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.731954 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.739219 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.748127 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.750293 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.755370 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.761374 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.761606 UTC 1691186 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.762281 UTC 1691187 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.764989 UTC 1691185 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:20:54.827272 UTC 1691184 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:36.743291 UTC 1692234 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:22:43.894243 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.909724 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.916182 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.952695 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.957118 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.971361 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.977587 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.991899 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.995322 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.998580 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:43.999952 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.003018 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.013938 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.022433 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.025366 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.032301 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.039581 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.040480 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.044848 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.050859 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.056120 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.056833 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.060489 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.060884 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.064377 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.072693 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.073337 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.076578 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.080027 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.085749 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.087732 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.089028 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.089608 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.089712 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.091060 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.094306 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.094566 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.097066 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.102151 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.103049 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.106046 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.112433 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.114188 UTC 1692239 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.114263 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.114987 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.115244 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.116569 UTC 1692237 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.119823 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.119958 UTC 1692236 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:22:44.121441 UTC 1692238 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:23:53.164655 UTC 1692903 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:24:00.126169 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.126889 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.133190 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.147257 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.159628 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.174163 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.174497 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.174952 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.182395 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.191583 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.197452 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.208533 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.216446 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.224227 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.233168 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.234698 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.240564 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.246026 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.252094 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.253517 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.258205 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.273370 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.273703 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.275848 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.284308 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.284879 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.286833 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.290308 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.293173 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.296554 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.299627 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.302421 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.304579 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.304916 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.307240 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.310124 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.312957 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.313162 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.314679 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.317493 UTC 1692907 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.319972 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.320366 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.320562 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.324126 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.326760 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.326853 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.327002 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.327071 UTC 1692906 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.329432 UTC 1692908 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:24:00.329486 UTC 1692905 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:34.688861 UTC 1693824 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:27:41.443468 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.464375 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.490111 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.503225 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.506195 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.516667 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.517427 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.532976 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.540153 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.550140 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.566211 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.566759 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.571477 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.580287 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.591845 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.607640 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.618624 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.620717 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.625879 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.634131 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.638634 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.639955 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.648386 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.653672 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.661668 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.669740 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.679880 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.683301 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.686557 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.688647 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.695569 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.700698 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.709137 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.715187 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.723242 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.725806 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.726861 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.735796 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.737475 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.752007 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.752327 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.758413 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.767072 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.767442 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.775695 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.784740 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.790491 UTC 1693829 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.799603 UTC 1693826 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.804557 UTC 1693827 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:27:41.856319 UTC 1693828 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:02.015715 UTC 1695836 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:37:10.169283 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.172435 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.178201 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.180208 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.188154 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.189879 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.235927 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.238182 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.244392 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.246568 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.248786 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.250120 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.267323 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.269200 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.271953 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.273027 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.275414 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.277741 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.292048 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.293959 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.299054 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.300881 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.305743 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.307666 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.322275 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.323948 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.324381 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.325343 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.338749 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.340580 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.345536 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.347517 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.357355 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.359067 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.369702 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.370743 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.373817 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.374164 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.375042 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.376346 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.376460 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.380040 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.380229 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.380563 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.389037 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.390621 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.395082 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.397044 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.401979 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.403570 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.414238 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.414429 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.417590 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.417746 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.423512 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.425449 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.426690 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.428482 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.431242 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.432059 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.435181 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.435567 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.440722 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.441724 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.443108 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.443886 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.444757 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.445822 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.447464 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.448607 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.454382 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.456198 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.458565 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.460103 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.468104 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.468441 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.471100 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.471338 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.476065 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.478366 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.486860 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.487731 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.489046 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.490501 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.492179 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.492784 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.494980 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.495230 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.498179 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.499668 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.507659 UTC 1695841 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.509153 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.516116 UTC 1695839 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.518276 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.583312 UTC 1695840 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.585025 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.585657 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.587046 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:37:10.592630 UTC 1695838 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:37:10.593875 UTC 1695836 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:190
20211215 12:39:56.234329 UTC 1696624 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:40:02.198508 UTC 1696628 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:40:02.198825 UTC 1696628 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:40:02.201892 UTC 1696624 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:40:02.201926 UTC 1696624 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:40:02.202209 UTC 1696624 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:40:02.202231 UTC 1696624 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:40:02.203703 UTC 1696626 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:40:02.204786 UTC 1696628 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:40:02.205219 UTC 1696624 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:40:02.205237 UTC 1696624 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:40:02.205238 UTC 1696628 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:40:02.206278 UTC 1696624 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:40:02.206325 UTC 1696624 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:40:02.207727 UTC 1696624 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:40:02.207746 UTC 1696624 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:42:10.009110 UTC 1697422 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:42:44.028703 UTC 1697424 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:42:44.030472 UTC 1697422 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:42:44.030509 UTC 1697422 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:42:44.033427 UTC 1697427 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:42:44.034775 UTC 1697422 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:42:44.034791 UTC 1697422 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:42:44.035275 UTC 1697426 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:42:44.037503 UTC 1697422 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:42:44.037518 UTC 1697422 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:42:44.041494 UTC 1697427 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:42:44.043018 UTC 1697422 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:42:44.043039 UTC 1697422 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:42:44.045367 UTC 1697427 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:42:44.046626 UTC 1697422 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:42:44.046644 UTC 1697422 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:191
20211215 12:44:34.384465 UTC 1698189 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:44:41.125031 UTC 1698193 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:44:41.126953 UTC 1698194 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:44:41.126971 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:44:41.126998 UTC 1698189 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:193
20211215 12:44:41.127076 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:62
20211215 12:44:41.129067 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:44:41.129091 UTC 1698189 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:193
20211215 12:44:41.129151 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:62
20211215 12:44:41.132254 UTC 1698192 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:44:41.133375 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:44:41.133395 UTC 1698189 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:193
20211215 12:44:41.133441 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:62
20211215 12:44:41.134065 UTC 1698191 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:44:41.134563 UTC 1698191 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:44:41.135628 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:44:41.135644 UTC 1698189 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:193
20211215 12:44:41.135683 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:62
20211215 12:44:41.136729 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:44:41.136752 UTC 1698189 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:193
20211215 12:44:41.136804 UTC 1698189 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:62
20211215 12:46:11.920491 UTC 1698676 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:46:17.691482 UTC 1698678 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:46:17.692846 UTC 1698681 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:46:17.692865 UTC 1698680 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:46:17.692962 UTC 1698678 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:46:17.693052 UTC 1698678 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:46:17.695793 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:46:17.695821 UTC 1698676 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:196
20211215 12:46:17.695913 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:65
20211215 12:46:17.696090 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:46:17.696104 UTC 1698676 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:196
20211215 12:46:17.696135 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:65
20211215 12:46:17.696348 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:46:17.696362 UTC 1698676 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:196
20211215 12:46:17.696401 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:65
20211215 12:46:17.698978 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:46:17.699001 UTC 1698676 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:196
20211215 12:46:17.699049 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:65
20211215 12:46:17.699108 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:57
20211215 12:46:17.699118 UTC 1698676 ERROR trade info is not complete  from_id:0 to_id:0 tool_id:0 num:0 - trade_service.cc:196
20211215 12:46:17.699165 UTC 1698676 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:65
20211215 12:47:29.456105 UTC 1699255 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 12:47:35.541670 UTC 1699259 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:47:35.543179 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:47:35.543478 UTC 1699255 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:47:35.543495 UTC 1699255 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:47:35.543497 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:47:35.543772 UTC 1699258 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:47:35.545115 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:47:35.545332 UTC 1699255 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:47:35.545337 UTC 1699255 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:47:35.545339 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:47:35.547298 UTC 1699260 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:47:35.549424 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:47:35.549650 UTC 1699255 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:47:35.549655 UTC 1699255 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:47:35.549657 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:47:35.551418 UTC 1699258 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:47:35.552391 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:47:35.552699 UTC 1699255 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:47:35.552703 UTC 1699255 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:47:35.552704 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:47:35.553154 UTC 1699257 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:47:35.554703 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:47:35.554896 UTC 1699255 INFO  exec sql no affect:UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - trade_db_client.cc:270
20211215 12:47:35.554900 UTC 1699255 INFO  tool can not be buy - trade_operate.cc:163
20211215 12:47:35.554902 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:49:09.496305 UTC 1699260 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:49:09.497857 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:49:09.498125 UTC 1699259 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:49:09.501750 UTC 1699259 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:49:09.501758 UTC 1699257 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:49:09.503325 UTC 1699257 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:49:09.506135 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.506406 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1003,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:49:09.539443 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726170556624,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726187649904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">732</em>,
      in <code class="function">_read_bytes</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _read_bytes(self, num_bytes):</pre>
<pre class="line before"><span class="ws">        </span>self._sock.settimeout(self._read_timeout)</pre>
<pre class="line before"><span class="ws">        </span>while True:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>data = self._rfile.read(num_bytes)</pre>
<pre class="line after"><span class="ws">                </span>break</pre>
<pre class="line after"><span class="ws">            </span>except (IOError, OSError) as e:</pre>
<pre class="line after"><span class="ws">                </span>if e.errno == errno.EINTR:</pre>
<pre class="line after"><span class="ws">                    </span>continue</pre>
<pre class="line after"><span class="ws">                </span>self._force_close()</pre></div>
</div>

<li><div class="frame" id="frame-139726187647104">
  <h4>File <cite class="filename">"/usr/lib64/python3.6/socket.py"</cite>,
      line <em class="line">586</em>,
      in <code class="function">readinto</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._checkReadable()</pre>
<pre class="line before"><span class="ws">        </span>if self._timeout_occurred:</pre>
<pre class="line before"><span class="ws">            </span>raise OSError(&quot;cannot read from timed out object&quot;)</pre>
<pre class="line before"><span class="ws">        </span>while True:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self._sock.recv_into(b)</pre>
<pre class="line after"><span class="ws">            </span>except timeout:</pre>
<pre class="line after"><span class="ws">                </span>self._timeout_occurred = True</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>except error as e:</pre>
<pre class="line after"><span class="ws">                </span>if e.args[0] in _blocking_errnos:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726161942176">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726161942400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726161941336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726161662304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">548</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line before"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line current"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre></div>
</div>

<li><div class="frame" id="frame-139726161662136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">775</em>,
      in <code class="function">_read_query_result</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>result.unbuffered_active = False</pre>
<pre class="line before"><span class="ws">                </span>result.connection = None</pre>
<pre class="line before"><span class="ws">                </span>raise</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>result = MySQLResult(self)</pre>
<pre class="line current"><span class="ws">            </span>result.read()</pre>
<pre class="line after"><span class="ws">        </span>self._result = result</pre>
<pre class="line after"><span class="ws">        </span>if result.server_status is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.server_status = result.server_status</pre>
<pre class="line after"><span class="ws">        </span>return result.affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139726161943128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">1156</em>,
      in <code class="function">read</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self.unbuffered_active:</pre>
<pre class="line before"><span class="ws">            </span>self._finish_unbuffered_query()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def read(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>first_packet = self.connection._read_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if first_packet.is_ok_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_ok_packet(first_packet)</pre>
<pre class="line after"><span class="ws">            </span>elif first_packet.is_load_local_packet():</pre>
<pre class="line after"><span class="ws">                </span>self._read_load_local_packet(first_packet)</pre></div>
</div>

<li><div class="frame" id="frame-139726161943352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">692</em>,
      in <code class="function">_read_packet</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:raise OperationalError: If the connection to the MySQL server is lost.</pre>
<pre class="line before"><span class="ws">        </span>:raise InternalError: If the packet sequence number is wrong.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>buff = bytearray()</pre>
<pre class="line before"><span class="ws">        </span>while True:</pre>
<pre class="line current"><span class="ws">            </span>packet_header = self._read_bytes(4)</pre>
<pre class="line after"><span class="ws">            </span># if DEBUG: dump_packet(packet_header)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>btrl, btrh, packet_number = struct.unpack(&quot;&lt;HBB&quot;, packet_header)</pre>
<pre class="line after"><span class="ws">            </span>bytes_to_read = btrl + (btrh &lt;&lt; 16)</pre>
<pre class="line after"><span class="ws">            </span>if packet_number != self._next_seq_id:</pre></div>
</div>

<li><div class="frame" id="frame-139726187649960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">740</em>,
      in <code class="function">_read_bytes</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>if e.errno == errno.EINTR:</pre>
<pre class="line before"><span class="ws">                    </span>continue</pre>
<pre class="line before"><span class="ws">                </span>self._force_close()</pre>
<pre class="line before"><span class="ws">                </span>raise err.OperationalError(</pre>
<pre class="line before"><span class="ws">                    </span>CR.CR_SERVER_LOST,</pre>
<pre class="line current"><span class="ws">                    </span>&quot;Lost connection to MySQL server during query (%s)&quot; % (e,),</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">            </span>except BaseException:</pre>
<pre class="line after"><span class="ws">                </span># Don&#x27;t convert unknown exception to MySQLError.</pre>
<pre class="line after"><span class="ws">                </span>self._force_close()</pre>
<pre class="line after"><span class="ws">                </span>raise</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726170556568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726170555952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"> - http_client.cc:49
20211215 12:49:09.539496 UTC 1699255 INFO  recv http reponse not json: <span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726170558024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726170555056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726170556008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726161944472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726161942624">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726161941784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726161941000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 732, in _read_bytes
    data = self._rfile.read(num_bytes)
  File &quot;/usr/lib64/python3.6/socket.py&quot;, line 586, in readinto
    return self._sock.recv_into(b)
ConnectionResetError: [Errno 104] Connection reset by peer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 775, in _read_query_result
    result.read()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 1156, in read
    first_packet = self.connection._read_packet()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 692, in _read_packet
    packet_header = self._read_bytes(4)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 740, in _read_bytes
    &quot;Lost connection to MySQL server during query (%s)&quot; % (e,),
pymysql.err.OperationalError: (2013, &#x27;Lost connection to MySQL server during query ([Errno 104] Connection reset by peer)&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 732, in _read_bytes
    data = self._rfile.read(num_bytes)
  File "/usr/lib64/python3.6/socket.py", line 586, in readinto
    return self._sock.recv_into(b)
ConnectionResetError: [Errno 104] Connection reset by peer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 548, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 775, in _read_query_result
    result.read()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 1156, in read
    first_packet = self.connection._read_packet()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 692, in _read_packet
    packet_header = self._read_bytes(4)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 740, in _read_bytes
    "Lost connection to MySQL server during query (%s)" % (e,),
pymysql.err.OperationalError: (2013, 'Lost connection to MySQL server during query ([Errno 104] Connection reset by peer)')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/py - http_client.cc:49
20211215 12:49:09.539511 UTC 1699255 INFO  recv http reponse not json: thon3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:49:09.539554 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:49:09.539664 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.546249 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:49:09.552118 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:49:09.557724 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.557914 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1002,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:49:09.574121 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726170674120,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726170579576">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726170580360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726170579464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726170580640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726170580304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726170673672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726170676920">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726170580696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726170582096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726170581704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726170581872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726170579968">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:49:09.574161 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726170579296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726170579184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:49:09.574206 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:49:09.574228 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.580243 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:49:09.580480 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:49:09.586246 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.586439 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1001,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:49:09.601268 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726161250008,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726161529936">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726161529488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726161530832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726161528536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726161527024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726161250680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726161249784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726161249672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726161248832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726161250120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726161249336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726161252304">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:49:09.601295 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726161252248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726161529544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:49:09.601326 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:49:09.601368 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.608246 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:49:09.608435 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:49:09.616097 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.616276 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1004,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:49:09.630410 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726174482384,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726174002424">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726174002200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726174000520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726174000744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726173999624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726174482328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726174481544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726174481488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726174000968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726174001976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726174002312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726174002256">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:49:09.630451 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726173999232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726173999344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:49:09.630501 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:49:09.630520 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.636267 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:49:09.636863 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:49:09.642031 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.642198 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1005,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:49:09.656269 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726172617360,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726170557968">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726170558080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726170554440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726170556680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726170556176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726172617640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726172616520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726172616576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726172618592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726172617472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726172617024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726172617584">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:49:09.656311 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726172617528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726170557688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:49:09.656366 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:49:09.656381 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:49:09.662650 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:57:20.593725 UTC 1699260 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:57:20.593725 UTC 1699258 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:57:20.597020 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:57:20.598067 UTC 1699258 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:57:20.598446 UTC 1699257 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:57:20.599855 UTC 1699260 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 12:57:20.602815 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.603058 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1001,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:57:20.617409 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726170917408,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726170981824">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726170982160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726170982272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726170982048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726170980816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726170917688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726170916960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726170917296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726170918080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726170917968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726170918808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726170917520">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:57:20.617450 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726170917352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726170917576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:57:20.617485 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:57:20.617499 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.626595 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:57:20.627027 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:57:20.632207 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.632382 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1003,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:57:20.648255 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726170915896,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726172503008">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726172502896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726172503344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726172502448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726172502728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726170915616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726170915504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726170915056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726170581368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726170916736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726170915168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726170556064">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:57:20.648283 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726170915560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726170558248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:57:20.648315 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:57:20.648333 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.653633 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:57:20.656492 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:57:20.660100 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.660283 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1002,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:57:20.674961 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726167000904,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726166999112">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726167032440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726167032664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726167032720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726167032888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726167001072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726167000792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726167000736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726167002696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726167002472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726167002248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726167001352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:57:20.675005 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726167000848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726166999168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:57:20.675040 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:57:20.675056 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.680324 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:57:20.680679 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:57:20.686300 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.686637 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1004,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:57:20.703376 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726165986888,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726167644144">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726167643640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726167644872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726167644816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726167644928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726166999896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726166999560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726166999728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726167000680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726166999672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726166999448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726166999616">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:57:20.703424 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726167645656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726167645880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:57:20.703492 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:57:20.703511 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.708718 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 12:57:20.709058 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 12:57:20.714314 UTC 1699255 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.714539 UTC 1699255 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1005,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 12:57:20.728254 UTC 1699255 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726164479168,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726163995952">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726163995728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726163994048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726163994272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726163993152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726164479952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726164479616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726163992760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726163994496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726163995504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726163995840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726163995784">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 12:57:20.728295 UTC 1699255 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726163992872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726163992704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 12:57:20.728368 UTC 1699255 ERROR user money change fail - trade_operate.cc:182
20211215 12:57:20.728387 UTC 1699255 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 12:57:20.733986 UTC 1699255 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:14.980304 UTC 1704031 INFO  connect db: host:127.0.0.1 user:root password: db_name:YinLi - mysql_base.cc:29
20211215 13:04:21.716828 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:21.716989 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:21.718897 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:21.718991 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:21.719083 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:21.720896 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:21.725430 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.725685 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1001,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:21.740818 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726168920864,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726162627160">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726162627664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726162626992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726162627216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726161983304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726167644312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726163996120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726162626208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726162627104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726162626712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726162626264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726162628560">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:21.740871 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726162628336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726162627888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:21.740926 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:21.740968 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.746694 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:21.747088 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:21.752968 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.753164 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1002,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:21.767976 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726159981144,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726159705816">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726159705592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726159704584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726159706040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726159706768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726159981424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726159980304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726159980360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726159982544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726159981816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726159980808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726159981256">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:21.768003 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726159981312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726159981368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:21.768039 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:21.768056 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.777163 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:21.781120 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:21.796451 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.796739 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1005,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:21.811652 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726158055016,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726158054848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726158201464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139726158201968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139726158200960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139726158202024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726158054512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726158055408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726158056640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726158055632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726158055744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726158057312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726158054568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:21.811680 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726158056584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726158054792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:21.811714 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:21.811731 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.817647 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:21.817854 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:21.826092 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.826289 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1004,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:21.840440 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725955596016,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725955112800">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725955112576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725955110896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725955111120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725955110000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725955109440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725955109720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725955109552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725955111344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725955112352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725955112688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725955112632">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:21.840479 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725955109496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725955109608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:21.840519 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:21.840534 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.845778 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:21.845915 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:21.851580 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.851752 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1003,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:21.867079 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725953752312,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725953108568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725953108344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725953106440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725953106776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725953109296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725953752592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725953751472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725953751528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725953751976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725953752424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725953752480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725953752536">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:21.867136 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725953107112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725953108120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:21.867180 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:21.867200 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:21.873032 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.530334 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.530866 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.533753 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.540807 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.541015 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1003,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.544056 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.561049 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139726158193888,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139726158194000">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139726158194616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725951644056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725951643776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725951644000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726158194168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726158193440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726158193776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726158195792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139726158195568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139726158195344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139726158194504">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.561085 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139726158193832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139726158194056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.561126 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.561145 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.567081 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.567289 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.567366 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.575764 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.575975 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1006,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.596469 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725953108288,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725951749760">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725951749088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725950132912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725950132576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725950132520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139726159705760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139726158192880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139726159979464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139726158192992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725951747744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725951749872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725951747800">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.596506 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725951747576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725951749200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.596603 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.596617 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.603100 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1006 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.604851 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.605991 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.606978 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.611411 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.611662 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1002,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.614668 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.614822 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.622689 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.635101 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725948091136,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725948131424">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725948131200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725948129408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725948129968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725948132152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725948091416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725948090688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725948091024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725948092088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725948091248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725948091080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725948091360">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.635150 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725948091304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725948130976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.635253 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.635272 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.636354 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.642566 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.643225 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.649437 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.649823 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.650044 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1001,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.667490 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.671246 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725949103184,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725946931968">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725946931520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725946642896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725946642616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725946642840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725949103128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725949103744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725949103632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725949104080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725949103464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725949103016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725949102960">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.671279 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725946932360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725946932024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.671321 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.671335 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.671798 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.672866 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.675822 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.677354 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.678529 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.689286 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.697007 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.697206 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1012,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.702114 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.716253 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.719693 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725946930176,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725919490792">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725919491016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725919493760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725919490736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725919493424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725946929616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725946930624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725946930904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725919492304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725919490288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725919490176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725919492920">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.719770 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725919490624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725919492640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.719818 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.719837 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.726256 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.728079 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.730847 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1012 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.731269 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.733425 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.737363 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.737568 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1010,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.744935 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.747630 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.754543 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.760231 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725936583736,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725936583848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725936585640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725936607472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725936607360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725936607416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725936584016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725936583288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725936583624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725936586592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725936585416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725936585192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725936584352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:04:56.760270 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725936583680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725936583904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.760323 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.760344 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.762102 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.763149 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.764411 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.767031 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1010 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.767233 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.768226 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.773083 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.773425 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.773659 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1008,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.777971 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.784928 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.794825 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.796168 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.797080 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725927223024,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725926710352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725926710128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725926708448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725926708672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725926707552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725927223248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725927222240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725927223136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725927223080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725927222688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725927222184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725926710184">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.797100 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725926710240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725926709904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.797167 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.797184 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.797721 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.798354 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.800939 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.803763 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.809105 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.810171 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1008 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.810322 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.812621 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.812939 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.813026 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.813511 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.814513 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.815539 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.818258 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.821913 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.822141 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1004,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.822759 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.826683 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.827390 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.829919 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.831168 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:04:56.840342 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725925337576,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725925337688">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725925221768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725925221992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725925222048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725925222216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725925337856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725925336736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725925336792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725925338976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725925338136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725925338192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725925338248">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.840365 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725925337240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725925337744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.840409 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.840425 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.846851 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.847055 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.853904 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.854124 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1005,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.870797 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725923603680,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725923603792">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725923604408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725923213720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725923213440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725923213664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725923603960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725923602840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725923602896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725923605584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725923605360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725923605136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725923604296">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.870825 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725923603344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725923603848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.870878 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.870892 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.876964 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.877149 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.882751 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.882930 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1009,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.898595 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725922185168,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725921697016">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725921696792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725921695112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725921695336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725921694216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725922185112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725922184328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725922184272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725921695560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725921696568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725921696904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725921696848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.898644 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725921693880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725921693936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.898690 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.898704 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.905899 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1009 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.906083 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.912685 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.912859 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1011,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.928526 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725918497424,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725918373872">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725918373648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725918371912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725918372416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725918374600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725918497704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725918496584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725918496640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725918498656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725918497536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725918497088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725918497648">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:56.928571 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725918497592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725918373424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.928619 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.928641 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.938001 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1011 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.938191 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.944516 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.944687 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1014,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:56.972003 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725916747144,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725916747256">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725919961944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725919965080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725919963792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725919962168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725916747424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725916746304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725916746360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725916749048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725916748824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725916748600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725916747704">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:04:56.972063 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725916746808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725916747312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:56.972159 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:56.972191 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.979131 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1014 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:56.979351 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:56.985831 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:56.986010 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1018,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.001667 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725914809232,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725914809848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725914809344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725914812312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725914810688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725914824776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725914809512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725914808392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725914808448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725914811136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725914812144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725914812368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725914810912">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.001703 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725914808896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725914809400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.001743 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.001762 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.009109 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1018 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.009294 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.016142 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.016351 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1013,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.030805 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725913968200,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725913324456">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725913324232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725913322552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725913322776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725913325184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725913968480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725913967360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725913967416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725913967864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725913968312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725913968368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725913968424">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:04:57.030870 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725913323000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725913324008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.030914 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.030930 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.037371 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1013 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.037566 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.042406 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.042611 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1020,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.057875 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725911951680,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725911951792">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725911852256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725911852480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725911852536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725911852704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725911951960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725911950840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725911950896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725911952240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725911953360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725911953136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725911952296">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.057913 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725911951344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725911951848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.057951 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.057967 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.065016 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1020 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.065201 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.071352 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.071671 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1019,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.087173 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725901395000,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725901395112">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725901396904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725901422832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725901422720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725901422776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725901395280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725901394160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725901394216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725901397856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725901396680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725901396456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725901395616">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.087212 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725901394664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725901395168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.087256 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.087277 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.094411 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1019 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.099982 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.105940 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.106234 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1007,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.142210 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725899981264,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725891151912">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725891150456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725900030192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725900031088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725900030976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725899984848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725899983896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725899983168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725899899960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725919988032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725899981376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725899983112">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.142247 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725899983336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725891150512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.142297 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.142313 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.148278 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1007 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.148567 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.153938 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.154100 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1015,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.168239 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725935388096,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725935388208">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725935104352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725935104576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725935104632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725935104800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725935388376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725935387256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725935387312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725935390000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725935389776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725935389552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725935388656">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.168280 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725935387760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725935388264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.168315 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.168332 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.174705 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1015 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.174867 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.182831 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.182994 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1024,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.197107 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725934058800,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725933571544">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725933571320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725933569640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725933569864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725933568744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725933568352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725933568464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725933568296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725933570088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725933571096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725933571432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725933571376">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.197149 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725933568128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725933568408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.197186 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.197205 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.202281 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1024 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.202514 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.207839 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.208031 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1016,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.222341 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725937244984,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725891152472">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725891152248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725891220928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725891219696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725891220984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725900031256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725900032600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725899916232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725899917576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725899918360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725899917520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725899916456">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.222367 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725891152304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725891151464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.222425 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.222443 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.229690 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1016 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.229917 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.236095 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.236303 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1021,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.250799 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725930651320,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725930028056">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725930027832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725930026152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725930026376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725930025256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725930651600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725930650480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725930650536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725930650984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725930651432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725930651488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725930651544">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.250851 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725930026600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725930027608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.250897 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.250914 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.259141 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1021 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.259359 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.265117 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.265287 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1027,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.284845 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725929179568,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725929179680">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725928551760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725928551984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725928552040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725928552208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725929179848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725929178728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725929178784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725929180240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725929180184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725929181024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725929180128">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.284878 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725929179232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725929179736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.284961 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.284979 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.290875 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1027 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.291090 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.296249 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.296423 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1029,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.310194 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725928575384,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725910129464">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725910129688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725910032736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725910032568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725910032680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725928553608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725928553832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725928554448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725928554280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725891198088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725891198480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725891197864">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.310220 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725910130640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725910128904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.310256 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.310272 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.316369 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1029 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.316582 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.325454 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.325681 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1025,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.340619 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725908974616,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725907967168">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725907966944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725907965264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725907965488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725907964368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725908975456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725908975512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725908975568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725908974672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725907966720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725907967056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725907967000">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.340672 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725907965712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725907964032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.340717 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.340737 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.346418 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1025 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.346622 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.351748 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.351958 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1041,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.369602 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725907122776,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725906487000">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725906486776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725906485768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725906487224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725906487952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725907123056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725907121936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725907121992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725907124176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725907123448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725907122440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725907122888">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.369690 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725907122944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725907123000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.369754 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.369774 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.375745 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1041 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.375992 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.381137 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.381356 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1026,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.396076 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725904852304,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725904852416">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725904982256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725904982480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725904982536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725904982704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725904852584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725904851464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725904851520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725904854208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725904853984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725904853760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725904852864">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.396120 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725904851968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725904852472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.396170 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.396191 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.402259 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1026 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.402454 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.407380 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.407634 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1039,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.423264 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725903957184,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725903474024">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725903473800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725903472120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725903472344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725903471224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725903957688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725903470888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725903470776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725903472568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725903473576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725903473912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725903473856">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.423326 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725903470944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725903470832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.423379 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.423395 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.429481 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1039 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.429711 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.434947 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.435117 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1023,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.448713 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725899217664,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725898573920">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725898573696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725898571904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725898572464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725898574648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725899217944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725899216824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725899216880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725899218616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725899217776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725899217328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725899217888">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.448742 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725899217832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725898573472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.448775 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.448790 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.454533 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1023 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.454714 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.460545 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.460773 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1030,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.476634 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725897381368,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725897381480">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725897109912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725897110136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725897110192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725897110360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725897381648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725897380528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725897380584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725897383272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725897383048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725897382824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725897381928">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.476680 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725897381032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725897381536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.476733 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.476751 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.481931 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1030 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.482098 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.487182 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.487388 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1033,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.502517 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725896072552,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725895573008">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725895572784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725895571104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725895571328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725895570208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725895569816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725895569928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725895569760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725895571552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725895572560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725895572896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725895572840">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.502578 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725895569592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725895569872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.502620 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.502639 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.508576 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1033 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.508757 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.514508 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.514680 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1022,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.528298 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725894208424,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725893564680">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725893564456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725893562552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725893563224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725893565408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725894208704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725894207584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725894207640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725894209488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725894208536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725894208088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725894208648">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.528334 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725894208592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725893564232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.528383 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.528406 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.534243 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1022 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.534437 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.540624 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.540854 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1032,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.556216 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725892351648,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725892351760">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725892092480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725892092704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725892092760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725892092928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725892351928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725892350808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725892350864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725892353552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725892353328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725892353104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725892352208">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.556253 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725892351312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725892351816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.556296 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.556315 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.561568 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1032 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.561800 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.567495 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.567701 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1036,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.583990 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725890788880,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725890293432">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725890293208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725890291528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725890291752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725890290632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725890290240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725890290352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725890290184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725890291976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725890292984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725890293320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725890293264">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.584031 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725890289736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725890290296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.584076 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.584100 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.589889 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1036 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.590067 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.595772 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.595954 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1017,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.620457 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725410540624,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725891219976">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725891219864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725891220088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725891221488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725891197080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725410540904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725410539784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725410539840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725410540288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725410540736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725410540792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725410540848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.620508 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725891249096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725891249712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.620543 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.620556 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.629340 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1017 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.629531 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.634836 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.635041 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1035,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.648956 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725899917072,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725409904960">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725408325872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725408326096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725408326152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725408326320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725899915448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725899916848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725899916904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725899918472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725899916064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725899915952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725899916176">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.648983 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725409905856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725409905632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.649014 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.649028 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.655017 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1035 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.655221 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.660094 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.660292 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1037,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.674089 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725407284416,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725406805352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725406805128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725406803448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725406803672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725406802552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725407284920">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725406802160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725406802216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725406803896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725406804904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725406805240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725406805184">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.674117 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725406802272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725406802104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.674157 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.674173 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.680014 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1037 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.680172 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.685505 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.685758 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1031,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.701752 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725405420288,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725405300832">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725405300608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725405298872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725405299376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725405301560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725405420568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725405419448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725405419504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725405421240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725405420400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725405419952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725405420512">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.701796 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725405420456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725405300384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.701845 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.701868 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.708635 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1031 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.708966 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.714128 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.714298 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1043,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.727910 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725403583992,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725403584104">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725403816344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725403816568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725403816624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725403816792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725403584272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725403583152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725403583208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725403585896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725403585672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725403585448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725403584552">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = ma - http_client.cc:49
20211215 13:04:57.727966 UTC 1704031 INFO  recv http reponse not json: ke_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725403583656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725403584160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.728013 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.728049 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.734531 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1043 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.734700 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.740560 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.740732 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1034,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.754732 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725402770792,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725401771536">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725401771312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725401769632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725401769856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725401768736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725401768344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725401768456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725401768288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725401770080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725401771088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725401771424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725401771368">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.754772 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725401768120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725401768400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.754814 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.754834 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.765458 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1034 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.765678 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.777659 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.777905 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1028,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.797961 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725400923048,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725400275208">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725400274984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725400273080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725400273752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725400275936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725400923328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725400922208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725400922264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725400924112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725400923160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725400922712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725400923272">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.798000 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725400923216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725400274760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.798095 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.798115 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.804873 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1028 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.805045 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.811723 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.811898 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1038,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.825571 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725399066272,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725399066384">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725398803008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725398803232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725398803288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725398803456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725399066552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725399065432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725399065488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725399068176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725399067952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725399067728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725399066832">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.825606 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725399065936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725399066440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.825657 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.825694 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.831738 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1038 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.831911 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.838497 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.838710 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1042,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.854453 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725397773840,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725397274296">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725397274072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725397272392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725397272616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725397271496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725397271104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725397271216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725397271048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725397272840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725397273848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725397274184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725397274128">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.854527 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725397270600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725397271160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.854573 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.854591 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.861803 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1042 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.861983 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.868681 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.868856 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1040,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.883093 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725395926096,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725395278256">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725395278032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725395276128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725395276464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725395278984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725395926376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725395925256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725395925312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725395925760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725395926208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725395926264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725395926320">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.883138 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725395276800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725395277808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.883185 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.883202 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.889168 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1040 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.889385 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.896427 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.896668 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1047,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.912903 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725385656136,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725385656248">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725385401064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725385401288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725385401344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725385401512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725385656416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725385655296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725385655352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725385658040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725385657816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725385657592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725385656696">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.912938 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725385655800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725385656304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.912988 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.913007 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.919525 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1047 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.919695 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.926023 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.926289 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1049,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.941001 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725384355568,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725383872352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725383872128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725383870448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725383870672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725383869552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725383868992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725383869272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725383869104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725383870896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725383871904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725383872240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725383872184">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.941040 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725383869048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725383869160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.941074 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.941089 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.947892 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1049 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.948090 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.954367 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.954556 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1048,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.968608 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725382507768,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725381880408">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725381880184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725381878280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725381878616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725381881136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725382508048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725382506928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725382506984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725382507432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725382507880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725382507936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725382507992">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.968634 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725381878952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725381879960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.968671 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.968685 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.975151 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1048 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:57.975334 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:57.981844 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:57.982001 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1045,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:57.997580 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725380515824,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725380515936">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725380408208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725380408432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725380408488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725380408656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725380516104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725380514984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725380515040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725380517728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725380517504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725380517280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725380516384">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:57.997610 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725380515488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725380515992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:57.997683 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:57.997828 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.005087 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1045 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:58.005299 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:58.014782 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.014955 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1044,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:58.029136 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725379366808,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725378881912">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725378883368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725378880792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725378881688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725378883312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725378880232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725378880512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725378880344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725378882136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725378883144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725378883480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725378883424">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:58.029169 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725378880288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725378880400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:58.029215 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:58.029227 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.037234 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1044 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:58.037430 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:58.043795 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.044024 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1050,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:58.058322 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725377506720,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725376862976">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725376862752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725376861072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725376861296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725376863704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725377507000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725377505880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725377505936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725377506384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725377506832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725377506888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725377506944">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:58.058364 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725376861520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725376862528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:58.058399 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:58.058414 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.065390 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1050 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:04:58.066005 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:04:58.073220 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.073402 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1046,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:04:58.087191 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725376030872,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725376030984">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725375403064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725375403288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725375403344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725375403512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725376031152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725376030032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725376030088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725376031432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725376032552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725376032328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725376031488">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:04:58.087216 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725376030536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725376031040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:04:58.087253 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:04:58.087268 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:04:58.098597 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1046 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.795731 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1010, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.797890 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.808661 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1004, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.809023 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1001, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.809369 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1003, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.811189 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1009, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.813300 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1007, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.813918 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.814161 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1010,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:42.827179 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1008, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.831809 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1016, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.836226 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1006, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.837790 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725375403680,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725373927776">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725373930016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725373931416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725373927944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725373931592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725373930240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725373930072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725373929512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725373928392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725373931248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725373931472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725373927664">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:42.837815 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725373930128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725373929848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:42.837852 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:42.837861 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.844710 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1010 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.847854 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.853558 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.853781 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1004,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:42.860859 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1005, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.865808 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1002, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.880589 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725373931648,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725371881568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725372522112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725372522224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725372522336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725372521104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725371879664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725371880112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725371883080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725371879496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725371880000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725371880056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725371881008">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = ma - http_client.cc:49
20211215 13:06:42.880629 UTC 1704031 INFO  recv http reponse not json: ke_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725371880280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725371882240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:42.880669 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:42.880687 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.884191 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1012, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.888133 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1013, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.890023 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1004 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.890374 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.896131 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.896394 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1001,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:42.896501 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1017, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.902161 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1018, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.904934 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1020, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.916519 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725373929400,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725371902888">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725371902216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725371901712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725371902048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725371902776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725928553272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725371883192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725371881848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725371883472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725371882296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725371883136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725371880672">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:42.916576 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725371881120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725371902608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:42.916620 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:42.916641 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.924213 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1001 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.924417 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.925866 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1015, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.930588 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.930777 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1003,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:42.931215 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1011, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.949101 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1019, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.949237 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1022, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.950342 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725369404888,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725360516736">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725360516512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725360514832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725360515056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725360513936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725360513544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725360513656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725360513488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725360515280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725360516288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725360516624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725360516568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:42.950374 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725360513320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725360513600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:42.950701 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:42.950716 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.956795 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1003 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.957056 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.960243 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1021, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.962126 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.962307 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1009,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:42.964576 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1014, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.965187 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1023, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.965797 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1024, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.983534 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725359152152,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725358508408">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725358508184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725358506280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725358506616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725358509136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725359152432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725359151312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725359151368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725359151816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725359152264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725359152320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725359152376">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:06:42.983572 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725358506952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725358507960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:42.983612 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:42.983636 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.984179 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1025, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.992194 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1009 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:42.992399 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:42.994454 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1029, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.996814 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1027, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:42.999127 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:42.999436 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1007,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.005776 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1037, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.013172 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1028, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.014243 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1031, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.021395 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725357295376,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725357295488">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725357032112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725357032336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725357032392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725357032560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725357295656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725357294536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725357294592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725357297280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725357297056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725357296832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725357295936">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.021446 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725357295040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725357295544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.021512 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.021533 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.027502 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1007 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.027676 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.029756 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1033, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.037331 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.037533 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1008,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.052340 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1030, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.056935 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1032, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.061180 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725356011192,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725357059880">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725357059656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725357057976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725357058200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725357057080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725357056520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725357056800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725357056632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725357058424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725357059432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725357059768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725357059712">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:06:43.061220 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725357056576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725357056688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.061263 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.061279 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.067072 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1008 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.067305 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.070376 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1036, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.075988 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.076210 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1016,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.083654 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1035, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.090342 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1034, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.091548 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1026, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.099282 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725354151104,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725353511456">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725353511232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725353509328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725353509664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725353512184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725354151384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725354150264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725354150320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725354150768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725354151216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725354151272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725354151328">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.099317 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725353510000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725353511008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.099363 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.099378 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.105802 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1016 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.105976 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.106952 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1038, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.108646 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1040, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.111508 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1049, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.112204 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.112432 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1006,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.117135 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1041, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.118326 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1047, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.124593 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1042, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.135198 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724873799608,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724873799720">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724873646936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724873647160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724873647216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724873647384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724873799888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724873798768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724873798824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724873801512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724873801288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724873801064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724873800168">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.135225 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724873799272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724873799776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.135267 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.135281 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.137887 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1039, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.146677 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1046, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.147266 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1045, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.147953 UTC 1704033 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1043, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.151002 UTC 1704036 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1044, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.152205 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1006 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.154360 UTC 1704034 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1048, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.160985 UTC 1704035 INFO  {"func_name": "trade", "argv": {"from_id": 1003, "to_id": 1050, "tool_id": 1320, "num": 4}} - trade_service.cc:23
20211215 13:06:43.169128 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.186517 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.186790 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1002,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.231890 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724872609744,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724871696848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724871696960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724871697576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724871700096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724871698304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725371882912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725371879888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725371883024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724872169456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724872168560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724872169960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724872169680">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.231928 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724872169400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724872168000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.231969 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.231986 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.237531 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1002 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.237832 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.244074 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.244256 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1005,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.258624 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724871842336,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725945058752">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725945059088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725945059200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725945058976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725945057744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724871842616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724871841496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724871841552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724871843008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724871842896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724871843736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724871842448">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.258667 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724871842000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724871842504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.258710 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.258727 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.263621 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1005 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.263833 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.268978 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.269158 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1012,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.283309 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725943428376,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725943428488">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725943429104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725943562704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725943562424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725943562648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725943428656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725943427536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725943427592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725943430280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725943430056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725943429832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725943428992">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.283410 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725943428040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725943428544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.283451 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.283468 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.289285 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1012 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.289453 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.294386 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.294556 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1013,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.310287 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725942529440,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725941587248">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725941587024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725941585344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725941585568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725941584448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725942529496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725942529048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725941584112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725941585792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725941586800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725941587136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725941587080">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.310329 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725941584168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725941584056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.310377 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.310396 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.316578 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1013 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.316784 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.322297 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.322512 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1017,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.336423 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725940669128,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725940049960">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725940049736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725940048000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725940048504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725940050688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725940669408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725940668288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725940668344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725940670080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725940669240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725940668792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725940669352">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.336480 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725940669296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725940049512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.336529 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.336617 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.342072 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1017 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.342253 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.347749 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.347932 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1018,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.363879 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725938832832,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725938832944">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725938549088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725938549312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725938549368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725938549536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725938833112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725938831992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725938832048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725938834736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725938834512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725938834288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725938833392">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:06:43.363927 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725938832496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725938833000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.363977 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.363995 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.374856 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1018 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.375064 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.385080 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.385247 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1020,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.398541 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725418994992,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725418507736">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725418507512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725418505832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725418506056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725418504936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725418504544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725418504656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725418504488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725418506280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725418507288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725418507624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725418507568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.398572 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725418504320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725418504600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.398618 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.398637 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.403724 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1020 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.403884 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.408803 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.408974 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1015,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.424010 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725417134960,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725416495312">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725416495088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725416493184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725416493856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725416496040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725417135240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725417134120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725417134176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725417136024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725417135072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725417134624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725417135184">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.424057 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725417135128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725416494864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.424105 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.424124 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.430509 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1015 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.430700 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.436584 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.436789 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1011,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.449896 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725415278184,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725415278296">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725415014920">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725415015144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725415015200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725415015368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725415278464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725415277344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725415277400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725415280088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725415279864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725415279640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725415278744">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.449921 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725415277848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725415278352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.449956 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.449971 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.455355 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1011 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.455526 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.461528 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.461751 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1019,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.483127 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725413977560,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725413494400">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725413494176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725413492496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725413492720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725413491600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725413491208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725413491320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725413491152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725413492944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725413493952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725413494288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725413494232">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.483160 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725413490984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725413491264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.483386 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.483418 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.489689 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1019 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.489906 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.496181 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.496360 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1022,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.512627 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725412117528,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725411490168">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725411489944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725411488040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725411488376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725411490896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725412117808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725412116688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725412116744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725412117192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725412117640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725412117696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725412117752">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.512681 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725411488712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725411489720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.512764 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.512780 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.518169 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1022 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.518371 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.525768 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.525951 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1021,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.541007 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725368293136,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725368293248">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725368058544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725368058768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725368058824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725368058992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725368293416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725368292296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725368292352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725368295040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725368294816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725368294592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725368293696">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.541049 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725368292800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725368293304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.541092 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.541111 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.546975 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1021 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.547165 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.552526 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.552688 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1014,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.566872 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725367013048,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725366538024">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725366537800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725366536120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725366536344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725366535224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725366534664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725366534944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725366534776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725366536568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725366537576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725366537912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725366537856">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.566912 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725366534720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725366534832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.566956 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.566976 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.574609 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1014 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.574800 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.579959 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.580136 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1023,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.594916 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725365165248,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725364521504">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725364521280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725364519376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725364519712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725364522232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725365165528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725365164408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725365164464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725365164912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725365165360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725365165416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725365165472">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.594955 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725364520048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725364521056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.594999 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.595191 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.601607 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1023 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.601880 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.609548 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.609793 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1024,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.630480 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725363718072,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725363718184">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725363037016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725363037240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725363037296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725363037464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725363718352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725363717232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725363717288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725363719976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725363719752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725363719528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725363718632">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.630532 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725363717736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725363718240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.630586 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.630604 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.637725 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1024 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.637937 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.644409 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.644596 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1025,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.660667 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139725362003808,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139725361516496">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139725361516272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139725361514592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139725361514816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139725361513696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139725361513136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139725361513416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139725361513248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139725361515040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139725361516048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139725361516384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139725361516328">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.660709 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139725361513192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139725361513304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.660761 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.660777 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.666627 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1025 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.666844 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.673301 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.673526 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1029,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.689233 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724870991208,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724870879944">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724870879720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724870878096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724870878040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724870880672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724870991488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724870990368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724870990424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724870990872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724870991320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724870991376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724870991432">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.689268 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724870878488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724870879496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.689310 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.689341 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.696078 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1029 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.696256 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.701708 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.701896 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1027,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.716724 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724869519456,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724869519568">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724868879360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724868879584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724868879640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724868879808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724869519736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724869518616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724869518672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724869521360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724869521136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724869520912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724869520016">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.716749 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724869519120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724869519624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.716784 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.716798 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.722329 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1027 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.722515 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.731904 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.732115 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1037,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.746378 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724867355480,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724867356936">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724867357160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724867358560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724867356096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724867355592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724867355760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724867355032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724867354696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724867357384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724867358392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724867358672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724867358616">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.746429 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724867355144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724867355648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.746486 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.746504 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.753240 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1037 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.753424 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.759062 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.759260 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1028,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.781741 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724865998352,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724871791504">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724871791336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724871792568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724871791112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724871794248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724865998632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724865997512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724865997568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724871813776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724873648112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724872609576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724865998464">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.781783 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724865998016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724865998520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.781828 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.781847 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.787859 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1028 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.788052 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.793377 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.793706 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1031,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.807059 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724864440360,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724864440472">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724864312264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724864312488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724864312544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724864312712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724864440640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724864439520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724864439576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724864442264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724864442040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724864441816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724864440920">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.807096 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724864440024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724864440528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.807148 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.807166 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.813499 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1031 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.813685 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.818548 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.818712 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1033,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.831637 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724853875488,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724853877168">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724853878624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724853876104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724853876944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724853878568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724853875768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724853874760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724853875040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724853877392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724853878400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724853878736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724853878680">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.831660 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724853875152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724853875656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.831696 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.831784 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.837076 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1033 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.837209 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.842567 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.842810 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1030,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.861612 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724853034456,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724852394808">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724852394584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724852392904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724852393128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724852395536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724853034736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724853033616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724853033672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724853034120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724853034568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724853034624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724853034680">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.861692 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724852393352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724852394360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.861766 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.861784 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.867416 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1030 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.867622 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.873246 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.873410 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1032,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.887309 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724851042512,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724851042624">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724850922608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724850922832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724850922888">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724850923056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724851042792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724851041672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724851041728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724851043072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724851044192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724851043968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724851043128">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.887344 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724851042176">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724851042680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.887381 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.887400 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.893538 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1032 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.893718 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.898945 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.899111 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1036,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.912614 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724849390536,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724849393616">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724849391152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724849390648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724848906424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724848906368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724849390816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724849389696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724849389752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724849392440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724849393448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724849392216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724849391992">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.912655 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724849390200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724849390704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.912700 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.912720 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.918449 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1036 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.918652 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.924307 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.924508 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1035,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.939325 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724848033408,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724847389664">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724847389440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724847387760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724847387984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724847386864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724848033688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724848032568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724848032624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724848033072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724848033520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724848033576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724848033632">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.939360 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724847388208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724847389216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.939405 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.939424 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.945127 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1035 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.945338 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.950642 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.950809 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1034,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.966362 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724846029176,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724846029288">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724845917464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724845917688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724845917744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724845917912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724846029456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724846028336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724846028392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724846029904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724846029792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724846030632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724846029736">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.966406 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724846028840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724846029344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.966445 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.966475 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.971735 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1034 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:43.971901 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:43.980564 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:43.980739 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1026,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:43.995303 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724844401776,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724844401888">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724844403680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724843905320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724843905152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724843905264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724844402056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724844400936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724844400992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724844404632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724844403456">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724844403232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724844402392">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:43.995349 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724844401440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724844401944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:43.995401 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:43.995418 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.001906 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1026 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.002101 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.006961 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.007157 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1038,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.021631 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724842909648,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724842388616">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724842388392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724842386712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724842386936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724842385816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724842909144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724842909480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724842908640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724842908696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724842909592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724842388504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724842388448">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.021676 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724842385480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724842385536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.021724 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.021745 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.032834 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1038 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.033074 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.043489 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.043711 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1040,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.059871 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724841024032,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724840908224">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724840908560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724840908672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724840908448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724840907216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724841024312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724841023192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724841023248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724841024704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724841024592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724841025432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724841024144">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.059915 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724841023696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724841024200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.059966 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.059987 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.066057 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1040 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.066245 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.071308 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.071523 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1049,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.086116 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724839286040,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724839286152">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724839286768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724839432656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724839432376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724839432600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724839286320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724839285200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724839285256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724839287944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724839287720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724839287496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724839286656">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.086172 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724839285704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724839286208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.086220 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.086241 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.091656 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1049 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.091845 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.097452 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.097660 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1041,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.112340 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724838390976,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724837383472">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724837383248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724837381568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724837381792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724837380672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724838391760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724838391424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724837380280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724837382016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724837383024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724837383360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724837383304">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.112366 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724837380392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724837380224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.112400 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.112414 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.118265 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1041 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.118512 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.123634 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.123950 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1047,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.141702 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724836035272,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724835928104">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724835927880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724835926088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724835926648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724835928832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724836035552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724836034432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724836034488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724836036224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724836035384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724836034936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724836035496">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg= - http_client.cc:49
20211215 13:06:44.141734 UTC 1704031 INFO  recv http reponse not json: &quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724836035440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724835927656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.141785 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.141803 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.147916 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1047 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.148130 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.153170 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.153337 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1042,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.169788 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724834706880,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724834706992">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724834439520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724834439744">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724834439800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724834439968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724834707160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724834706040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724834706096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724834708784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724834708560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724834708336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724834707440">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.169815 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724834706544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724834707048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.169851 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.169865 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.176894 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1042 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.177112 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.182408 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.182623 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1039,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.196848 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724833410352,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724832394712">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724832394488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724832392808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724832393032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724832391912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724832391520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724832391632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724832391464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724832393256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724832394264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724832394600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724832394544">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.196900 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724832391296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724832391576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.196951 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.196968 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.202135 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1039 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.202323 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.208757 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.208932 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1046,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.222739 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724831554416,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724830918864">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724830918640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724830916736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724830917408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724830919592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724831554696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724831553576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724831553632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724831555480">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724831554528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724831554080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724831554640">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.222767 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724831554584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724830918416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.222806 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.222823 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.228501 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1046 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.228738 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.233638 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.233799 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1045,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.250675 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724829701736,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724829701848">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724829438472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724829438696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724829438752">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724829438920">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724829702016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724829700896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724829700952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724829703640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724829703416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724829703192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724829702296">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.250717 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724829701400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724829701904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.250762 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.250785 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.257299 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1045 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.257495 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.264580 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.264763 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1043,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.278399 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724828409304,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724827397760">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724827397536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724827395856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724827396080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724827394960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724827394568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724827394680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724827394512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724827396304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724827397312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724827397648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724827397592">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.278439 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724827394344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724827394624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.278500 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.278518 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.284380 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1043 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.284565 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.293965 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.294179 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1044,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.321434 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724826552304,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724826552472">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724825912320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724825913776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724825914000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724825912880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724826553144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724826553200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724826553760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724826552864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724826552696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724826553536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724826552528">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.321508 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724826553928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724826553816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.321556 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.321574 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.327953 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1044 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.328150 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.335585 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.335760 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1048,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.350364 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724824688400,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724824688512">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724826002096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724826002320">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724826002376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724826002544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724824688680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724824687560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724824687616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724824690304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724824690080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724824689856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724824688960">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.350403 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724824688064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724824688568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.350446 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.350479 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.358552 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1048 tool_id:1320 num:4 - trade_service.cc:207
20211215 13:06:44.358742 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 1 where user_id = 1003 and tool_id = 1320 and  remain_num>=4; - mysql_base.cc:60
20211215 13:06:44.367067 UTC 1704031 DEBUG [exeSQL] SELECT * from on_sale_t where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.367242 UTC 1704031 INFO  http://127.0.0.1:8086/money/update {"content":[{"trade_from":1050,"trade_money":4568,"trade_to":1003}]}
 - http_client.cc:16
20211215 13:06:44.381969 UTC 1704031 INFO  recv http reponse not json: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>pymysql.err.InterfaceError: (0, &#x27;&#x27;) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not accidentally trigger a request to /favicon.ico which might
         change the application's state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139724823404216,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Un0C2cOgfUlWDL9nEGWa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>pymysql.err.InterfaceError</h1>
<div class="detail">
  <p class="errormsg">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139724822925096">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">74</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>after_money_buyer = before_money_buyer - money</pre>
<pre class="line before"><span class="ws">        </span>after_money_seller = before_money_seller + money</pre>
<pre class="line before"><span class="ws">        </span># step 2: update table user_wallet</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_buyer = sql_uw_update % (buyer_id, money * (-1), before_money_buyer, after_money_buyer, int(time.time()))</pre>
<pre class="line before"><span class="ws">        </span>sql_insert_seller= sql_uw_update % (seller_id, money, before_money_seller, after_money_seller, int(time.time()))</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(sql_insert_buyer)</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_insert_seller)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># step 3: update table capital_flow</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(sql_cf_update)</pre>
<pre class="line after"><span class="ws">        </span># step 4: update table user_info</pre></div>
</div>

<li><div class="frame" id="frame-139724822924872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">148</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>while self.nextset():</pre>
<pre class="line before"><span class="ws">            </span>pass</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>query = self.mogrify(query, args)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>result = self._query(query)</pre>
<pre class="line after"><span class="ws">        </span>self._executed = query</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, args):</pre>
<pre class="line after"><span class="ws">        </span># type: (str, list) -&gt; int</pre></div>
</div>

<li><div class="frame" id="frame-139724822923192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/cursors.py"</cite>,
      line <em class="line">310</em>,
      in <code class="function">_query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _query(self, q):</pre>
<pre class="line before"><span class="ws">        </span>conn = self._get_db()</pre>
<pre class="line before"><span class="ws">        </span>self._last_executed = q</pre>
<pre class="line before"><span class="ws">        </span>self._clear_result()</pre>
<pre class="line current"><span class="ws">        </span>conn.query(q)</pre>
<pre class="line after"><span class="ws">        </span>self._do_get_result()</pre>
<pre class="line after"><span class="ws">        </span>return self.rowcount</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _clear_result(self):</pre>
<pre class="line after"><span class="ws">        </span>self.rownumber = 0</pre></div>
</div>

<li><div class="frame" id="frame-139724822923416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">547</em>,
      in <code class="function">query</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def query(self, sql, unbuffered=False):</pre>
<pre class="line before"><span class="ws">        </span># if DEBUG:</pre>
<pre class="line before"><span class="ws">        </span>#     print(&quot;DEBUG: sending query:&quot;, sql)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(sql, str):</pre>
<pre class="line before"><span class="ws">            </span>sql = sql.encode(self.encoding, &quot;surrogateescape&quot;)</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, sql)</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre>
<pre class="line after"><span class="ws">        </span>return self._affected_rows</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def next_result(self, unbuffered=False):</pre>
<pre class="line after"><span class="ws">        </span>self._affected_rows = self._read_query_result(unbuffered=unbuffered)</pre></div>
</div>

<li><div class="frame" id="frame-139724822922296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139724822921736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2091</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139724822922016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2076</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139724822921848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">2073</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139724822923640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1518</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139724822924648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1516</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139724822924984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1502</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139724822924928">
  <h4>File <cite class="filename">"/root/2dpython/team5/src/bank_module/mmm.py"</cite>,
      line <em class="line">103</em>,
      in <code class="function">update</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>db.commit()</pre>
<pre class="line before"><span class="ws">    </span>#except Exception,err:</pre>
<pre class="line before"><span class="ws">    </span>#    response = make_response(jsonify(errno=1, errmsg=err), 500)</pre>
<pre class="line before"><span class="ws">    </span>#    return response</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>db.rollback()</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=2, errmsg=&quot;module mmm update error&quot;), 500)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre>
<pre class="line after"><span - http_client.cc:49
20211215 13:06:44.382011 UTC 1704031 INFO  recv http reponse not json:  class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>response = make_response(jsonify(errno=0, errmsg=&quot;SUCCESS&quot;), 200)</pre>
<pre class="line after"><span class="ws">        </span>return response</pre></div>
</div>

<li><div class="frame" id="frame-139724822921792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">479</em>,
      in <code class="function">rollback</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Roll back the current transaction.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>See `Connection.rollback() &lt;https://www.python.org/dev/peps/pep-0249/#rollback&gt;`_</pre>
<pre class="line before"><span class="ws">        </span>in the specification.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)</pre>
<pre class="line after"><span class="ws">        </span>self._read_ok_packet()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def show_warnings(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send the &quot;SHOW WARNINGS&quot; SQL command.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._execute_command(COMMAND.COM_QUERY, &quot;SHOW WARNINGS&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139724822921904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.6/site-packages/pymysql/connections.py"</cite>,
      line <em class="line">793</em>,
      in <code class="function">_execute_command</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>:raise InterfaceError: If the connection is closed.</pre>
<pre class="line before"><span class="ws">        </span>:raise ValueError: If no username was specified.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if not self._sock:</pre>
<pre class="line current"><span class="ws">            </span>raise err.InterfaceError(0, &quot;&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># If the last query was unbuffered, make sure it finishes before</pre>
<pre class="line after"><span class="ws">        </span># sending new commands</pre>
<pre class="line after"><span class="ws">        </span>if self._result is not None:</pre>
<pre class="line after"><span class="ws">            </span>if self._result.unbuffered_active:</pre></div>
</div>
</ul>
  <blockquote>pymysql.err.InterfaceError: (0, &#x27;&#x27;)</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 74, in update
    cursor.execute(sql_insert_buyer)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 148, in execute
    result = self._query(query)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 310, in _query
    conn.query(q)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2076, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.6/site-packages/flask/app.py&quot;, line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/root/2dpython/team5/src/bank_module/mmm.py&quot;, line 103, in update
    db.rollback()
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, &quot;ROLLBACK&quot;)
  File &quot;/usr/local/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 793, in _execute_command
    raise err.InterfaceError(0, &quot;&quot;)
pymysql.err.InterfaceError: (0, &#x27;&#x27;)</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 74, in update
    cursor.execute(sql_insert_buyer)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 148, in execute
    result = self._query(query)
  File "/usr/local/lib/python3.6/site-packages/pymysql/cursors.py", line 310, in _query
    conn.query(q)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 547, in query
    self._execute_command(COMMAND.COM_QUERY, sql)
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2091, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2076, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2073, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1518, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1516, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1502, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/root/2dpython/team5/src/bank_module/mmm.py", line 103, in update
    db.rollback()
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 479, in rollback
    self._execute_command(COMMAND.COM_QUERY, "ROLLBACK")
  File "/usr/local/lib/python3.6/site-packages/pymysql/connections.py", line 793, in _execute_command
    raise err.InterfaceError(0, "")
pymysql.err.InterfaceError: (0, '')

-->
 - http_client.cc:49
20211215 13:06:44.382055 UTC 1704031 ERROR user money change fail - trade_operate.cc:182
20211215 13:06:44.382074 UTC 1704031 DEBUG [exeSQL] UPDATE on_sale_t SET trade_lock = 0 where user_id = 1003 and tool_id = 1320; - mysql_base.cc:60
20211215 13:06:44.387589 UTC 1704031 ERROR trade fail  from_id:1003 to_id:1050 tool_id:1320 num:4 - trade_service.cc:207
